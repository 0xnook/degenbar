{
  "address": "0xE91F787c9066962E2B7CD81ED9Cc3c8bA78e150d",
  "abi": [
    {
      "inputs": [],
      "name": "getMaxBlockTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDataTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receviedSigner",
          "type": "address"
        }
      ],
      "name": "isSignerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receivedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "isTimestampValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redstoneGetLastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b9d935aafee96cc913a771cbe56f7d273464314eb4de3a53ce57efe0a066bab",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0xE91F787c9066962E2B7CD81ED9Cc3c8bA78e150d",
    "transactionIndex": 0,
    "gasUsed": "965327",
    "logsBloom": "0x
    "blockHash": "0x5bee108ffa6f028604586bcd56fed060be436e1f0bd35bcb31a52ade0f3e67e7",
    "transactionHash": "0x1b9d935aafee96cc913a771cbe56f7d273464314eb4de3a53ce57efe0a066bab",
    "logs": [],
    "blockNumber": 30024310,
    "cumulativeGasUsed": "965327",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0c9a2cc0e0c6e93d39fee3ccc6b54d52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getMaxBlockTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDataTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receviedSigner\",\"type\":\"address\"}],\"name\":\"isSignerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedTimestamp\",\"type\":\"uint256\"}],\"name\":\"isTimestampValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redstoneGetLastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TestContract.sol\":\"TestContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0xd34e84e25c6ef3010f5479755258aaddaeba63fa56eee31db26778c0fdd9d30a\",\"license\":\"MIT\"},\"src/TestContract.sol\":{\"content\":\"\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\\\";\\n\\ncontract TestContract is PriceAware {\\n\\n function redstoneGetLastPrice() public view returns(uint) {\\n        uint usdchf = getPriceFromMsg(bytes32(\\\"CHF\\\"));\\n        return usdchf;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public override virtual view returns (bool) {\\n    // Put your logic of signers authorisation here\\n    // You can check check evm addresses for providers at: https://api.redstone.finance/providers\\n    return _receviedSigner == 0x0C39486f770B26F5527BBBf942726537986Cd7eb; // redstone main demo provider\\n   \\n  }\\n}\",\"keccak256\":\"0xdd1f5da83f31ef0b7fdd8b579c0a0c15d9f38f4bce1235f43757a20ad2c266b8\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806311c89b101461005c5780633520dc061461008c5780635118af5a146100aa57806375058205146100c8578063f31a210a146100f8575b600080fd5b6100766004803603810190610071919061091d565b610116565b6040516100839190610965565b60405180910390f35b610094610162565b6040516100a19190610999565b60405180910390f35b6100b2610197565b6040516100bf9190610999565b60405180910390f35b6100e260048036038101906100dd91906109e0565b6101a0565b6040516100ef9190610965565b60405180910390f35b61010061021c565b60405161010d9190610999565b60405180910390f35b6000730c39486f770b26f5527bbbf942726537986cd7eb73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008061018e7f4348460000000000000000000000000000000000000000000000000000000000610225565b90508091505090565b6000600f905090565b6000816101ab610197565b426101b69190610a3c565b116101f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed90610b15565b60405180910390fd5b81421080610215575061020761021c565b82426102139190610b35565b105b9050919050565b600060b4905090565b600080600167ffffffffffffffff81111561024357610242610b69565b5b6040519080825280602002602001820160405280156102715781602001602082028036833780820191505090505b509050828160008151811061028957610288610b98565b5b60200260200101818152505061029e816102c1565b6000815181106102b1576102b0610b98565b5b6020026020010151915050919050565b60606000606136033590506000602060408360ff166102e09190610bd5565b6102ea9190610c11565b905060606040519050818152816042830136036020830137602081016040526000818051906020012090506000816040516020016103289190610ccb565b604051602081830303815290604052805190602001209050606060405190506041815260418036036020830137602081016040526000610371828461042990919063ffffffff16565b905061037c81610116565b6103bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b290610d3d565b60405180910390fd5b6000606236033590506103cd816101a0565b61040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040390610da9565b60405180910390fd5b61041a8a8960ff1689610450565b98505050505050505050919050565b600080600061043885856104f6565b9150915061044581610579565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b888510156104e657604085028101359150600093505b89518410156104db57816020850260208c01015114156104c35760206040860282010135602085026020880101526001830192505b89518314156104d0578894505b60018401935061048e565b600185019450610478565b5084955050505050509392505050565b6000806041835114156105385760008060006020860151925060408601519150606086015160001a905061052c8782858561074e565b94509450505050610572565b60408351141561056957600080602085015191506040850151905061055e86838361085b565b935093505050610572565b60006002915091505b9250929050565b6000600481111561058d5761058c610dc9565b5b8160048111156105a05761059f610dc9565b5b14156105ab5761074b565b600160048111156105bf576105be610dc9565b5b8160048111156105d2576105d1610dc9565b5b1415610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90610e44565b60405180910390fd5b6002600481111561062757610626610dc9565b5b81600481111561063a57610639610dc9565b5b141561067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290610eb0565b60405180910390fd5b6003600481111561068f5761068e610dc9565b5b8160048111156106a2576106a1610dc9565b5b14156106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da90610f42565b60405180910390fd5b6004808111156106f6576106f5610dc9565b5b81600481111561070957610708610dc9565b5b141561074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190610fd4565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610789576000600391509150610852565b601b8560ff16141580156107a15750601c8560ff1614155b156107b3576000600491509150610852565b6000600187878787604051600081526020016040526040516107d8949392919061101f565b6020604051602081039080840390855afa1580156107fa573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561084957600060019250925050610852565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61089e9190610a3c565b90506108ac8782888561074e565b935093505050935093915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ea826108bf565b9050919050565b6108fa816108df565b811461090557600080fd5b50565b600081359050610917816108f1565b92915050565b600060208284031215610933576109326108ba565b5b600061094184828501610908565b91505092915050565b60008115159050919050565b61095f8161094a565b82525050565b600060208201905061097a6000830184610956565b92915050565b6000819050919050565b61099381610980565b82525050565b60006020820190506109ae600083018461098a565b92915050565b6109bd81610980565b81146109c857600080fd5b50565b6000813590506109da816109b4565b92915050565b6000602082840312156109f6576109f56108ba565b5b6000610a04848285016109cb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a4782610980565b9150610a5283610980565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8757610a86610a0d565b5b828201905092915050565b600082825260208201905092915050565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b6000610aff602a83610a92565b9150610b0a82610aa3565b604082019050919050565b60006020820190508181036000830152610b2e81610af2565b9050919050565b6000610b4082610980565b9150610b4b83610980565b925082821015610b5e57610b5d610a0d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061ffff82169050919050565b6000610be082610bc7565b9150610beb83610bc7565b92508161ffff0483118215151615610c0657610c05610a0d565b5b828202905092915050565b6000610c1c82610bc7565b9150610c2783610bc7565b92508261ffff03821115610c3e57610c3d610a0d565b5b828201905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610c8a601c83610c49565b9150610c9582610c54565b601c82019050919050565b6000819050919050565b6000819050919050565b610cc5610cc082610ca0565b610caa565b82525050565b6000610cd682610c7d565b9150610ce28284610cb4565b60208201915081905092915050565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b6000610d27601583610a92565b9150610d3282610cf1565b602082019050919050565b60006020820190508181036000830152610d5681610d1a565b9050919050565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b6000610d93601983610a92565b9150610d9e82610d5d565b602082019050919050565b60006020820190508181036000830152610dc281610d86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000610e2e601883610a92565b9150610e3982610df8565b602082019050919050565b60006020820190508181036000830152610e5d81610e21565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000610e9a601f83610a92565b9150610ea582610e64565b602082019050919050565b60006020820190508181036000830152610ec981610e8d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f2c602283610a92565b9150610f3782610ed0565b604082019050919050565b60006020820190508181036000830152610f5b81610f1f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fbe602283610a92565b9150610fc982610f62565b604082019050919050565b60006020820190508181036000830152610fed81610fb1565b9050919050565b610ffd81610ca0565b82525050565b600060ff82169050919050565b61101981611003565b82525050565b60006080820190506110346000830187610ff4565b6110416020830186611010565b61104e6040830185610ff4565b61105b6060830184610ff4565b9594505050505056fea2646970667358221220072fe35cafc34db48711e5a0dfb2937520c8102fe3735fc7206b57cf0dd29f9364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}